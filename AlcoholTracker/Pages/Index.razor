@page "/"
@using System.Text.Json
@using System.Diagnostics.CodeAnalysis
@inject Blazored.LocalStorage.ISyncLocalStorageService LocalStorage
@inject IDialogService DialogService

<MudText Typo="Typo.h5" Align="Align.Center">Alcohol Tracking</MudText>

<MudText Align="Align.Center" Typo="Typo.h6" >Current value: @BacTracker.GetPercentage().ToString("N3") % BAC</MudText>
<MudText Align="Align.Center" Typo="Typo.subtitle2" >@BacTracker.GetPercentage(DateTimeOffset.UtcNow.AddHours(1)).ToString("N3") % BAC in one hour</MudText>
<MudChart ChartType="ChartType.Line" SelectedIndex="0" XAxisLabels="BacTracker.XAxisLabels" ChartSeries="BacTracker.GetTimeSeries()" Width="100%" Height="350px" ChartOptions="_chartOptions" ></MudChart>

<MudExpansionPanels>
    <MudExpansionPanel Text="Recent" Disabled="!BacTracker.RecentDrinks.Any()" @bind-IsExpanded="ShowRecent">

        
        <MudSlider Style="margin-top: 1rem;" @bind-Value="@MinutesAgo" Min="0" Max="60" Step="1" ValueLabel="true">Finished</MudSlider>
        <div style=" display: inline-block;"><MudNumericField @bind-Value="MinutesAgo" Variant="Variant.Text" Min="0" Max="60" MaxLength="4" HideSpinButtons="true" FullWidth="false" Style="width: 3rem; margin-top: 0;" Margin="Margin.None"/></div> minutes ago
        <div class="d-flex flex-wrap gap-2 mt-4">
            @foreach (var drink in BacTracker.RecentDrinks)
            {
                <MudButton @onclick="() => AddRecentDrinkByHash(drink.DrinkHash)" Variant="Variant.Filled">@drink.ToString()</MudButton>
            }
            <MudButton @onclick="ClearRecent" IconSize="Size.Small" StartIcon="@Icons.Material.Outlined.Clear"></MudButton>
        </div>

    </MudExpansionPanel>
    <MudExpansionPanel Text="Standard Drinks">
        <MudSlider @bind-Value="@StandardDrinks" Min="0" Max="10" Step="0.1" ValueLabel="true">Standard drinks</MudSlider>
        <div style=" display: inline-block;"><MudNumericField @bind-Value="StandardDrinks" Variant="Variant.Text" Min="0.0" Max="10" MaxLength="4" HideSpinButtons="true" FullWidth="false" Style="width: 3rem; margin-top: 0;" Margin="Margin.None"/></div>

        <MudSlider Style="margin-top: 1rem;" @bind-Value="@MinutesAgo" Min="0" Max="60" Step="1" ValueLabel="true">Finished</MudSlider>
        <div style=" display: inline-block;"><MudNumericField @bind-Value="MinutesAgo" Variant="Variant.Text" Min="0" Max="60" MaxLength="4" HideSpinButtons="true" FullWidth="false" Style="width: 3rem; margin-top: 0;" Margin="Margin.None"/></div> minutes ago

        <div style="margin-top: 1.5rem;"><MudButton @onclick="AddStandardDrink" Variant="Variant.Filled">Add drink</MudButton></div>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Drink by mL">
        <MudSlider @bind-Value="@DrinkPercent" Min="0" Max="80" Step="0.1" ValueLabel="true">Alcohol %</MudSlider>
        <div style=" display: inline-block;"><MudNumericField @bind-Value="DrinkPercent" Variant="Variant.Text" Min="0.0" Max="80" MaxLength="4" HideSpinButtons="true" FullWidth="false" Style="width: 3rem; margin-top: 0;" Margin="Margin.None"/></div> %

        <MudSlider Style="margin-top: 1rem;" @bind-Value="@SizeInMl" Min="0" Max="2000" Step="5" ValueLabel="true">Size (mL)</MudSlider>
        <div style=" display: inline-block;"><MudNumericField @bind-Value="SizeInMl" Variant="Variant.Text" Min="0" Max="2000" MaxLength="4" HideSpinButtons="true" FullWidth="false" Style="width: 3rem; margin-top: 0;" Margin="Margin.None"/></div> mL

        <MudSlider Style="margin-top: 1rem;" @bind-Value="@MinutesAgo" Min="0" Max="60" Step="1" ValueLabel="true">Finished</MudSlider>
        <div style=" display: inline-block;"><MudNumericField @bind-Value="MinutesAgo" Variant="Variant.Text" Min="0" Max="60" MaxLength="4" HideSpinButtons="true" FullWidth="false" Style="width: 3rem; margin-top: 0;" Margin="Margin.None"/></div> minutes ago

        <div style="margin-top: 1.5rem;"><MudButton @onclick="AddDrinkInMl" Variant="Variant.Filled">Add drink</MudButton></div>
    </MudExpansionPanel>
    <MudExpansionPanel Text="@SettingsText">
        <MudSlider @bind-Value="@BacTracker.Weight" Min="10" Max="200" Step="1" ValueLabel="true">Weight</MudSlider>
        <div style=" display: inline-block;"><MudNumericField @bind-Value="BacTracker.Weight" Variant="Variant.Text" Min="10" Max="200" MaxLength="4" HideSpinButtons="true" FullWidth="false" Style="width: 3rem; margin-top: 0;" Margin="Margin.None"/></div> KG

        <MudSelect @bind-Value="BacTracker.Gender" Label="Gender" Style="margin-top: 1rem;">
            <MudSelectItem Value="@("male")">Male</MudSelectItem>
            <MudSelectItem Value="@("female")">Female</MudSelectItem>
            <MudSelectItem Value="@("other")">Other (mid-point)</MudSelectItem>
        </MudSelect>
    </MudExpansionPanel>

    <MudExpansionPanel Text="History" Disabled="!(BacTracker?.Drinks?.Any() ?? false)" @bind-IsExpanded="ShowHistory">

        <MudSimpleTable>
            <tbody>

            @foreach (var drink in BacTracker.Drinks.OrderByDescending(d => d.Time))
            {
                <tr>
                    <td>@drink.Time.ToLocalTime().ToString("f")</td>
                    <td >@drink.ToString()</td>
                    <td >@drink.Grams.ToString("N2") g</td>
                    <td ><MudFab @onclick="() => RemoveDrink(drink)" Size="Size.Small" StartIcon="@Icons.Material.Outlined.Delete"></MudFab></td>
                    <td ><MudFab @onclick="() => BacTracker.DuplicateDrink(drink.DrinkId)" Size="Size.Small" StartIcon="@Icons.Material.Outlined.Add"></MudFab></td>
                </tr>
            }
            </tbody>
        </MudSimpleTable>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {

    [AllowNull]
    private BacTracker BacTracker { get; set; }
    private double StandardDrinks { get; set; } = 1.2; 
    private double DrinkPercent { get; set; } = 4.5;
    private double SizeInMl { get; set; } = 375;
    private int MinutesAgo { get; set; }

    private string SettingsText => $"Settings ({BacTracker.Gender}, {BacTracker.Weight} kg)";
    private readonly ChartOptions _chartOptions = new()
    {
        YAxisFormat = "N2", 
        XAxisLines = false,
        YAxisTicks = 1
    };

    private Task _interval;
    private bool ShowHistory { get; set; }
    private bool ShowSettings { get; set; }
    private bool ShowRecent { get; set; }

    public Index()
    {
        _interval = Task.Run(async () =>
        {
            while (true)
            {
                await Task.Delay(TimeSpan.FromSeconds(60)).ConfigureAwait(false);
                StateHasChanged();
            }
        });
    }

    public void AddRecentDrinkByHash(int hash) =>
        BacTracker.AddRecentDrinkByHash(DateTimeOffset.UtcNow.AddMinutes(-MinutesAgo), hash);
    private void AddStandardDrink() => 
        BacTracker.AddDrink(new StandardDrink(DateTimeOffset.UtcNow.AddMinutes(-MinutesAgo), StandardDrinks));
    private void AddDrinkInMl() => 
        BacTracker.AddDrink(new DrinkInMl(DateTimeOffset.UtcNow.AddMinutes(-MinutesAgo), SizeInMl, DrinkPercent));

    protected override void OnInitialized()
    {
        base.OnInitialized();

        try
        {
            var bacTracker = LocalStorage.GetItem<BacTracker>("bacTracker");

            if (bacTracker == null)
                ShowSettings = true;
                
            BacTracker = bacTracker??new();
        }
        catch (Exception e)
        {
            BacTracker = new();
            ShowSettings = true;
            Console.WriteLine($"Error reading, {e.Message} - {e.StackTrace}");
        }
        
        BacTracker.UpdateCallback = BacTrackerUpdateCallback;
    }

    private void BacTrackerUpdateCallback(BacTracker currentBacTracker)
    {
        try
        {
            MergeFromStorage(currentBacTracker);

            LocalStorage.SetItem("bacTracker", currentBacTracker);
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error writing, {e.Message} - {e.StackTrace}");
        }
    }

    private void MergeFromStorage(BacTracker currentBacTracker)
    {
        var bacTracker = LocalStorage.GetItem<BacTracker>("bacTracker");
        if (bacTracker == null) return;
        
        var existingDrinkIds = currentBacTracker.Drinks.Select(d => d.DrinkId).ToHashSet();

        var hasNewDrinks = bacTracker.Drinks.Select(d => d.DrinkId).Except(existingDrinkIds).Any();
        var hasRemovedDrinks = bacTracker.RemovedDrinkIds.Keys.Intersect(existingDrinkIds).Any();
        
        foreach (var (drinkId, time) in bacTracker.RemovedDrinkIds.Where(kv => !currentBacTracker.RemovedDrinkIds.ContainsKey(kv.Key)))
            currentBacTracker.RemovedDrinkIds.TryAdd(drinkId, time);
        
        if (!hasNewDrinks && !hasRemovedDrinks) return;

        var allRemovedIds = currentBacTracker.RemovedDrinkIds.Keys.ToHashSet();
        
        var now = DateTimeOffset.UtcNow;
        currentBacTracker.StandardDrinks.AddRange(bacTracker.StandardDrinks.Where(d => !allRemovedIds.Contains(d.DrinkId) && !d.IsDrinkPastCutoff(now) && !existingDrinkIds.Contains(d.DrinkId)));
        currentBacTracker.DrinkInMls.AddRange(bacTracker.DrinkInMls.Where(d => !allRemovedIds.Contains(d.DrinkId) && !d.IsDrinkPastCutoff(now) && !existingDrinkIds.Contains(d.DrinkId)));

        currentBacTracker.StandardDrinks.RemoveAll(d => allRemovedIds.Contains(d.DrinkId));
        currentBacTracker.DrinkInMls.RemoveAll(d => allRemovedIds.Contains(d.DrinkId));

        // This would sync the deleted usual drinks cache - not implementing
        // Without storing hashes you've cleared you might get recent drinks popping up after clearing, which would be confusing.
        // Leaving as I may implement in the future
        
        // foreach (var newCount in bacTracker.CountByHash.Where(kv => !currentBacTracker.CountByHash.ContainsKey(kv.Key)))
        //     currentBacTracker.CountByHash.TryAdd(newCount.Key, newCount.Value);
        // foreach (var newStandardDrinkBase in bacTracker.StandardDrinksBase.Where(kv =>
        //     !currentBacTracker.StandardDrinksBase.ContainsKey(kv.Key)))
        //     currentBacTracker.StandardDrinksBase.TryAdd(newStandardDrinkBase.Key, newStandardDrinkBase.Value);
        // foreach (var newDrinkInMlBase in bacTracker.DrinkInMlsBase.Where(kv =>
        //     !currentBacTracker.DrinkInMlsBase.ContainsKey(kv.Key)))
        //     currentBacTracker.DrinkInMlsBase.TryAdd(newDrinkInMlBase.Key, newDrinkInMlBase.Value);
    
    }

    private async void ClearRecent()
    {
        if (await DialogService.ShowMessageBox(
            "Clear",
            "Clear your usual beverages?",
            yesText: "Clear", cancelText: "Cancel") == null) return;
        BacTracker.ClearRecentDrinks(); 
        ShowRecent = false;
        StateHasChanged();
    }

    private void RemoveDrink(IDrink drink)
    {
        BacTracker.RemoveDrink(drink);
        if (!BacTracker.Drinks.Any()) ShowHistory = false;
    }

}