@page "/"
@using System.Diagnostics.CodeAnalysis
@using System.Globalization
@using Align = MudBlazor.Align
@inject Blazored.LocalStorage.ISyncLocalStorageService LocalStorage
@inject IDialogService DialogService

<MudText Typo="Typo.h5" Align="Align.Center">Alcohol Tracking</MudText>

<MudText Align="Align.Center" Typo="Typo.h6" >Current value: @BacTracker.GetPercentage().ToString("N3") % BAC</MudText>
<MudText Align="Align.Center" Typo="Typo.subtitle2" >@BacTracker.GetPercentage(DateTimeOffset.UtcNow.AddHours(1)).ToString("N3") % BAC in one hour</MudText>

<ApexChart @ref="BacChart" Title="BAC over time" TItem="TimeAndPercent">
    <ApexPointSeries Items="BacTracker.GetTimeSeries()" TItem="TimeAndPercent" XValue="t => t.Time" YValue="t => (decimal?) t.Percent" ></ApexPointSeries>
</ApexChart>

<MudExpansionPanels>
    <MudExpansionPanel Text="Recent" Disabled="!BacTracker.RecentDrinks.Any()" @bind-IsExpanded="ShowRecent">

        
        <MudSlider Style="margin-top: 1rem;" @bind-Value="@MinutesAgo" Min="0" Max="60" Step="1" ValueLabel="true">Finished</MudSlider>
        <div style=" display: inline-block;"><MudNumericField @bind-Value="MinutesAgo" Variant="Variant.Text" Min="0" Max="60" MaxLength="4" HideSpinButtons="true" FullWidth="false" Style="width: 3rem; margin-top: 0;" Margin="Margin.None"/></div> minutes ago
        <div class="d-flex flex-wrap gap-2 mt-4">
            @foreach (var drink in BacTracker.RecentDrinks)
            {
                <MudButton @onclick="() => { AddRecentDrinkByHash(drink.DrinkHash); return BacChart.UpdateSeriesAsync(); }" Variant="Variant.Filled">@drink.ToString()</MudButton>
            }
            <MudButton @onclick="ClearRecent" IconSize="Size.Small" StartIcon="@Icons.Material.Outlined.Clear"></MudButton>
        </div> 

    </MudExpansionPanel>
    <MudExpansionPanel Text="Standard Drinks">
        <MudSlider @bind-Value="@StandardDrinks" Min="0" Max="10" Step="0.1" ValueLabel="true">Standard drinks</MudSlider>
        <div style=" display: inline-block;"><MudNumericField @bind-Value="StandardDrinks" Variant="Variant.Text" Min="0.0" Max="10" MaxLength="4" HideSpinButtons="true" FullWidth="false" Style="width: 3rem; margin-top: 0;" Margin="Margin.None"/></div>

        <MudSlider Style="margin-top: 1rem;" @bind-Value="@MinutesAgo" Min="0" Max="60" Step="1" ValueLabel="true">Finished</MudSlider>
        <div style=" display: inline-block;"><MudNumericField @bind-Value="MinutesAgo" Variant="Variant.Text" Min="0" Max="60" MaxLength="4" HideSpinButtons="true" FullWidth="false" Style="width: 3rem; margin-top: 0;" Margin="Margin.None"/></div> minutes ago

        <div style="margin-top: 1.5rem;"><MudButton @onclick="() => { AddStandardDrink(); return BacChart.UpdateSeriesAsync(); }" Variant="Variant.Filled">Add drink</MudButton></div>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Drink by mL">
        <MudSlider @bind-Value="@DrinkPercent" Min="0" Max="80" Step="0.1" ValueLabel="true">Alcohol %</MudSlider>
        <div style=" display: inline-block;"><MudNumericField @bind-Value="DrinkPercent" Variant="Variant.Text" Min="0.0" Max="80" MaxLength="4" HideSpinButtons="true" FullWidth="false" Style="width: 3rem; margin-top: 0;" Margin="Margin.None"/></div> %

        <MudSlider Style="margin-top: 1rem;" @bind-Value="@SizeInMl" Min="0" Max="2000" Step="5" ValueLabel="true">Size (mL)</MudSlider>
        <div style=" display: inline-block;"><MudNumericField @bind-Value="SizeInMl" Variant="Variant.Text" Min="0" Max="2000" MaxLength="4" HideSpinButtons="true" FullWidth="false" Style="width: 3rem; margin-top: 0;" Margin="Margin.None"/></div> mL

        <MudSlider Style="margin-top: 1rem;" @bind-Value="@MinutesAgo" Min="0" Max="60" Step="1" ValueLabel="true">Finished</MudSlider>
        <div style=" display: inline-block;"><MudNumericField @bind-Value="MinutesAgo" Variant="Variant.Text" Min="0" Max="60" MaxLength="4" HideSpinButtons="true" FullWidth="false" Style="width: 3rem; margin-top: 0;" Margin="Margin.None"/></div> minutes ago

        <div style="margin-top: 1.5rem;"><MudButton @onclick="() => { AddDrinkInMl(); return BacChart.UpdateSeriesAsync(); }" Variant="Variant.Filled">Add drink</MudButton></div>
    </MudExpansionPanel>
    <MudExpansionPanel Text="@SettingsText">
        <MudSlider @bind-Value="@BacTracker.Person.WeightInKg" @bind-Value:after="() => BacChart.UpdateSeriesAsync()" Min="10" Max="200" Step="1" ValueLabel="true">Weight</MudSlider>
        <div style=" display: inline-block;"><MudNumericField @bind-Value:after="() => BacChart.UpdateSeriesAsync()" @bind-Value="BacTracker.Person.WeightInKg" Variant="Variant.Text" Min="10" Max="200" MaxLength="4" HideSpinButtons="true" FullWidth="false" Style="width: 3rem; margin-top: 0;" Margin="Margin.None"/></div> KG
        
        <MudSlider  @onchange="() => BacChart.UpdateSeriesAsync()"  @bind-Value="@BacTracker.Person.HeightInCm" Min="100" Max="220" Step="1" ValueLabel="true">Height</MudSlider>
        <div style=" display: inline-block;"><MudNumericField @bind-Value:after="() => BacChart.UpdateSeriesAsync()" @bind-Value="BacTracker.Person.HeightInCm" Variant="Variant.Text" Min="100" Max="220" MaxLength="4" HideSpinButtons="true" FullWidth="false" Style="width: 3rem; margin-top: 0;" Margin="Margin.None"/></div> CM

        <MudDatePicker @bind-Date="BacTracker.Person.BirthDate" Culture="_cultureInfo" @bind-Date:after="() => BacChart.UpdateSeriesAsync()" ></MudDatePicker>
 
        <MudSelect @bind-Value="BacTracker.Person.Gender" Label="Gender" Class="mt-4" FullWidth="false"  @bind-Value:after="() => BacChart.UpdateSeriesAsync()" >
            <MudSelectItem Value="@(Gender.Male)">Male</MudSelectItem>
            <MudSelectItem Value="@(Gender.Female)">Female</MudSelectItem>
        </MudSelect>

        <MudText Class="mt-2" Typo="Typo.body2">Note, I can't support any other gender options, as the studies the BAC calculation are based on use averages of two cohorts seperated by gender.</MudText>
    </MudExpansionPanel>

    <MudExpansionPanel Text="History" Disabled="!(BacTracker?.Drinks?.Any() ?? false)" @bind-IsExpanded="ShowHistory">

        <MudSimpleTable>
            <tbody>

            @foreach (var drink in BacTracker.Drinks.OrderByDescending(d => d.Time))
            {
                <tr>
                    <td>@drink.Time.ToLocalTime().ToString("h:mm tt")</td>
                    <td >@drink.ToString()</td>
                    <td ><MudFab @onclick="() => { RemoveDrink(drink); return BacChart.UpdateSeriesAsync(); }" Size="Size.Small" StartIcon="@Icons.Material.Outlined.Delete"></MudFab></td>
                    <td ><MudFab @onclick="() => { BacTracker.DuplicateDrink(drink.DrinkId); return BacChart.UpdateSeriesAsync(); }" Size="Size.Small" StartIcon="@Icons.Material.Outlined.FileCopy"></MudFab></td>
                </tr>
            }
            </tbody>
        </MudSimpleTable>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {

    [AllowNull]
    private BacTracker BacTracker { get; set; }
    private double StandardDrinks { get; set; } = 1.2; 
    private double DrinkPercent { get; set; } = 4.5;
    private double SizeInMl { get; set; } = 375;
    private int MinutesAgo { get; set; }
    private readonly CultureInfo _cultureInfo = CultureInfo.GetCultureInfo("en-au");
    private string SettingsText => $"Settings ({BacTracker.Person.Gender}, {BacTracker.Person.WeightInKg} kg, {BacTracker.Person.HeightInCm} cm)";
    private readonly ChartOptions _chartOptions = new()
    {
        YAxisFormat = "N2", 
        XAxisLines = false,
        YAxisTicks = 1
    };

    private Task _interval;
    private bool ShowHistory { get; set; }
    private bool ShowSettings { get; set; }
    private bool ShowRecent { get; set; }
    private ApexChart<TimeAndPercent> BacChart { get; set; }

    public Index()
    {
        // var o = new ApexChartOptions<TimeAndPercent>
        // {
        //
        // };
        //
        _interval = Task.Run(async () =>
        {
            while (true)
            {
                await Task.Delay(TimeSpan.FromSeconds(60)).ConfigureAwait(false);
                StateHasChanged();
            }
        });
    }

    private void AddRecentDrinkByHash(int hash) =>
        BacTracker.AddRecentDrinkByHash(DateTimeOffset.UtcNow.AddMinutes(-MinutesAgo), hash);
    private void AddStandardDrink() => 
        BacTracker.AddDrink(new StandardDrink(DateTimeOffset.UtcNow.AddMinutes(-MinutesAgo), StandardDrinks));
    private void AddDrinkInMl() => 
        BacTracker.AddDrink(new DrinkInMl(DateTimeOffset.UtcNow.AddMinutes(-MinutesAgo), SizeInMl, DrinkPercent));

    protected override void OnInitialized()
    {
        base.OnInitialized();

        try
        {
            var bacTracker = LocalStorage.GetItem<BacTracker>("bacTracker");

            if (bacTracker == null)
                ShowSettings = true;
                
            BacTracker = bacTracker??new();
        }
        catch (Exception e)
        {
            BacTracker = new();
            ShowSettings = true;
            Console.WriteLine($"Error reading, {e.Message} - {e.StackTrace}");
        }
        BacTracker.UpdateCallback = BacTrackerUpdateCallback;
    }

    private void BacTrackerUpdateCallback(BacTracker currentBacTracker)
    {
        try
        {
            var bacTracker = LocalStorage.GetItem<BacTracker>("bacTracker");
            if (bacTracker != null) currentBacTracker.MergeFromStorage(bacTracker);

            LocalStorage.SetItem("bacTracker", currentBacTracker);
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error writing, {e.Message} - {e.StackTrace}");
        }
    }

    private async void ClearRecent()
    {
        if (await DialogService.ShowMessageBox(
            "Clear",
            "Clear your usual beverages?",
            yesText: "Clear", cancelText: "Cancel") == null) return;
        BacTracker.ClearRecentDrinks(); 
        ShowRecent = false;
        StateHasChanged();
    }

    private async void RemoveDrink(IDrink drink)
    {
        BacTracker.RemoveDrink(drink);
        if (!BacTracker.Drinks.Any()) ShowHistory = false;
        await BacChart.UpdateSeriesAsync();
    }

}